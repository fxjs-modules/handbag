const test = require('test')
test.setup()

const fxHandbag = require('../../')

const fpug = require('fib-pug')
const cheerio = require('cheerio')

const vm = require('vm')
const fs = require('fs')
const path = require('path')
const moduleHash = require('@fibjs/builtin-modules/lib/util/get-builtin-module-hash')()

const __abs_test_root = path.resolve(__dirname, '../')

describe('register: pug', () => {
    let vbox = null

    const pugLocals = {
        testVar: Date.now()
    }

    function testRenderResult (renderedHtml, locals = {
        testVar: ''
    }) {
        assert.equal(cheerio(renderedHtml).find('#parent-wrap').length, 0)

        const instance = cheerio(`<div>${renderedHtml}</div>`)
        assert.equal(instance.find('#parent-wrap').length, 1)
        assert.equal(instance.find('#parent-wrap > #test').length, 1)

        assert.equal(instance.find('style').length, 1)
        assert.equal(instance.find('script').length, 1)

        assert.equal(instance.find('#test > p').length, 1)
        assert.equal(instance.find('#test > p').text(), locals.testVar)

        // test html generated by included file.
        assert.equal(instance.find('#included-div').length, 1)
        assert.equal(instance.find('#included-div > blockquote').length, 1)
        assert.equal(instance.find('#included-div > h1').length, 1)
        assert.equal(instance.find('#included-div > h2').length, 1)
    }

    function getCompilerOptions () {
		return {
			filters: {
				typescript: require('jstransformer-typescript').render,
				stylus: require('jstransformer-stylus').render,
			},
			basedir: __abs_test_root
		}
	}

    function testPugAbsoluteResult (renderedHtml) {
		assert.equal(cheerio(renderedHtml).find('#included-div').length, 1)
		assert.equal(cheerio(renderedHtml).find('#abs-wrapper + #included-div').length, 1)
    }

    it('registerPugAsHtml', () => {
		const _filename = path.resolve(__dirname, './test.pug')
		const renderedHtml = fpug.renderFile(
			_filename,
			{
				...getCompilerOptions(),
				filename: _filename
			}
		)
        testRenderResult(renderedHtml)

        const vbox = new vm.SandBox(moduleHash)
        fxHandbag.registers.pug.registerPugAsHtml(vbox, { compilerOptions: getCompilerOptions() })
        assert.equal(
            renderedHtml,
            vbox.require('./test.pug', __dirname)
        )

        const vbox2 = new vm.SandBox(moduleHash)
        fxHandbag.registers.pug.registerPugAsHtml(vbox2, { compilerOptions: getCompilerOptions() })

		testPugAbsoluteResult(vbox2.require('./test.abs.pug', __dirname))
    })

    it('registerPugAsRenderer', () => {
		const _filename = path.resolve(__dirname, './test.pug')
		const compilerOptions = getCompilerOptions()
		compilerOptions.inlineRuntimeFunctions = Math.random(0, 1) > 0.5
		compilerOptions.filename = _filename

		const renderedHtml = fpug.compile(fs.readTextFile(_filename), compilerOptions)(pugLocals)
		testRenderResult(renderedHtml, pugLocals)

        const vbox = new vm.SandBox(moduleHash)
        fxHandbag.registers.pug.registerPugAsRenderer(vbox, { compilerOptions: getCompilerOptions() })
        assert.equal(
            renderedHtml,
            vbox.require('./test.pug', __dirname)(pugLocals)
		)

        const vbox2 = new vm.SandBox(moduleHash)
        fxHandbag.registers.pug.registerPugAsRenderer(vbox2, { compilerOptions: getCompilerOptions() })

		testPugAbsoluteResult(vbox2.require('./test.abs.pug', __dirname)())
    })
})

describe('register: riot', () => {
    let vbox = null

    it('registerRiotAsJs', () => {
        vbox = new vm.SandBox(moduleHash)
        vbox.add('module', class Module {})
        const riot = vbox.require('riot', __dirname)

        function registerRiotAsJs (vbox) {
            const compilerOptions = {
            }

            fxHandbag.vboxUtils.setCompilerForVbox(vbox, {
                suffix: '.tag',
                compiler: (buf, info) => fxHandbag.vboxUtils.wrapAsString(
                    riot.compile(buf + '', compilerOptions, info.filename)
                )
            })
        }
        registerRiotAsJs(vbox)

        const compiledJs = vbox.require('./test.tag', __dirname)
    })
})

if (require.main === module) {
    test.run(console.DEBUG)
    process.exit()
}
